package application;

import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Node;
import javafx.scene.Scene;
import javafx.scene.control.Alert;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.control.Button;
import javafx.scene.control.ButtonType;
import javafx.scene.control.Label;

import java.io.IOException;
import java.util.Optional;

import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.scene.control.TableView;
import javafx.scene.control.TextField;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.image.Image;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Pane;
import javafx.scene.layout.StackPane;
import javafx.scene.layout.VBox;
import javafx.stage.Modality;
import javafx.stage.Stage;
import javafx.scene.control.TableColumn;

public class PrincipaleController {
	@FXML
	private TableView<Contatto> tabella;
	@FXML
	private TableColumn<Contatto, String> colNome;
	@FXML
	private TableColumn<Contatto, String> colCognome;
	@FXML
	private TableColumn<Contatto, String> colNumero;
	@FXML
	private Button btNuovo;
	@FXML
	private Button btModifica;
	@FXML
	private Button btElimina;
	@FXML
	private Button btLogOut;
	
	
	Button salva;
	Button annulla;
	StackPane secondaryLayout;
	Stage newWindow;
	Scene secondScene;
	Contatto temp;
	
	Avvisi av = new Avvisi();
	
	
	TextField tno,tco,tin,tte,tet;
	
	public ObservableList<Contatto> list;
	ModelPrincipaleController model=new ModelPrincipaleController();
	
	Utente utente;
	Scanner scanner = new Scanner();

	public void setParametri(Utente u) {
		// TODO Auto-generated method stub
		utente= u;
		
		colNome.setCellValueFactory(new PropertyValueFactory<Contatto,String>("nome"));
		colCognome.setCellValueFactory(new PropertyValueFactory<Contatto,String>("cognome"));
		colNumero.setCellValueFactory(new PropertyValueFactory<Contatto,String>("telefono"));
		
		CreaLista(u);
	}

	// Event Listener on Button[#btNuovo].onAction
	@FXML
	public void nuovoContatto(ActionEvent event) throws IOException {
		// TODO Autogenerated
		
		//CREARE IL NUOVO CONTATTO
		creaFinestra(null,event);
		
		salva.setOnAction(new EventHandler<ActionEvent>() {
			@Override
			public void handle(ActionEvent event) {
				//test nei dati inseriti
				
				if(tno.getText().equals("") || tco.getText().equals("") || tin.getText().equals("") || tte.getText().equals("") || tet.getText().equals("")) {
					
					av.creaFinestraErrore("campi","non lasciare i campi vuoti!");
					
				}else {
					
					
						if(tno.getText().length()>45 || tco.getText().length()>45 || tin.getText().length()>45 || tte.getText().length()>45 || tet.getText().length()>10) {
							av.creaFinestraErrore("numero caratteri","i primi 4 campi devono essere minori o uguali di 45 caratteri, invece il campo età deve essere al massimo 10 caratteri");
						}else {
							try{
								Integer.parseInt(tet.getText());
								temp = new Contatto(null, utente.getId(), tno.getText(), tco.getText(), tin.getText(), tte.getText(), Integer.valueOf(tet.getText()));
								if(model.utentePresente(temp)) {
									av.creaFinestraErrore("Utente già presente","L'utente è già presente!");
								}else {
									model.nuovoContatto(temp);
									CreaLista(utente);
									
									newWindow.close();
								}
							}catch(NumberFormatException e) {
								av.creaFinestraErrore("errore carattere","Devi inserire un numero non un carattere");
							}
						}
				}
			}
		});
		annulla.setOnAction(new EventHandler<ActionEvent>() {
			@Override
			public void handle(ActionEvent event) {
				//NON FACCIO NULLA
				newWindow.close();
			}
		});
	}
	// Event Listener on Button[#btModifica].onAction
	@FXML
	public void modificaContatto(ActionEvent event) {
		// TODO Autogenerated
		if(tabella.getSelectionModel().getSelectedItem()!=null)
		{
			Contatto c = tabella.getSelectionModel().getSelectedItem();
			
			
			//MODIFICARE IL CONTATTO
			creaFinestra(c, event);
			
			salva.setOnAction(new EventHandler<ActionEvent>() {
				@Override
				public void handle(ActionEvent event) {
					//TEST NEI DATI INSERITI
					
					
					if(tno.getText().equals("") || tco.getText().equals("") || tin.getText().equals("") || tte.getText().equals("") || tet.getText().equals("")) {
						av.creaFinestraErrore("campi","non lasciare i campi vuoti!");
					}else {
						
							if(tno.getText().length()>45 || tco.getText().length()>45 || tin.getText().length()>45 || tte.getText().length()>45 || tet.getText().length()>10) {
								av.creaFinestraErrore("numero caratteri","i primi 4 campi devono essere minori o uguali di 45 caratteri, invece il campo età deve essere al massimo 10 caratteri");
							}else {
								
								try{
									Integer.parseInt(tet.getText());
								
								temp = new Contatto(c.getId(), utente.getId(), tno.getText(), tco.getText(), tin.getText(), tte.getText(), Integer.valueOf(tet.getText()));
								
								
								model.modificaContatto(temp);
								CreaLista(utente);
								
								newWindow.close();
								
								}catch(NumberFormatException e) {
									av.creaFinestraErrore("errore carattere","Devi inserire un numero non un carattere");
								}
							}
					}
				}
			});
			annulla.setOnAction(new EventHandler<ActionEvent>() {
				@Override
				public void handle(ActionEvent event) {
					//NON FACCIO NULLA
					newWindow.close();
				}
			});
			
			
			
			
			
		}else {
			av.creaFinestraErrore("Selezionare Contatto","Devi selezionare un contatto nell'elenco");
		}
		
		
	}
	// Event Listener on Button[#btElimina].onAction
	@FXML
	public void eliminaContatto(ActionEvent event) {
		
		if(tabella.getSelectionModel().getSelectedItem()!=null)
		{
			Contatto c = tabella.getSelectionModel().getSelectedItem();
			
			Alert alert = new Alert(AlertType.CONFIRMATION);
			Stage stage = (Stage) alert.getDialogPane().getScene().getWindow();
			stage.getIcons().add(new Image(this.getClass().getResource("/imm/rubrica.jpg").toString()));
			alert.setTitle("Elimina");
			alert.setHeaderText("Elimina");
			alert.setContentText("Sei sicuro di eliminare " + c.getNome() + " " + c.getCognome() + "?");

			Optional<ButtonType> result = alert.showAndWait();
			if (result.get() == ButtonType.OK){
			    //SI ELIMINA IL CONTATTO
				
				model.eliminaContatto(c);
				CreaLista(utente);
			}
		}else {
			av.creaFinestraErrore("Selezionare Contatto","Devi selezionare un contatto nell'elenco");
		}
		
		
	}
	// Event Listener on Button[#btLogOut].onAction
	@FXML
	public void logOut(ActionEvent event) {
		// TODO Autogenerated
		((Node)event.getSource()).getScene().getWindow().hide();
		Stage primaryStage = new Stage();
		FXMLLoader loader = new FXMLLoader();
		Pane root;
		try {
			root = loader.load(getClass().getResource("/application/LoginRegistrazione.fxml").openStream());
			LoginRegistrazioneController cnt = (LoginRegistrazioneController) loader.getController();
			cnt.setParametri();
			Scene scene = new Scene(root);
			scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
			primaryStage.setTitle("Login");
			primaryStage.setResizable(false);
			primaryStage.getIcons().add(new Image("/imm/rubrica.jpg"));
			primaryStage.setScene(scene);
			primaryStage.show();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			System.out.println(e);
		}
		
	}
	
	private void CreaLista(Utente u)
	{
		tabella.getItems().clear();
		tabella.setItems(model.creaLista(utente));
	}
	
	private void creaFinestra(Contatto c, ActionEvent event)
	{
		Label tit = new Label("Modifica il contatto");
		Label no = new Label("Nome:");
		tno = new TextField();
		Label co = new Label("Cognome:");
		tco = new TextField();
		Label in = new Label("Indirizzo");
		tin = new TextField();
		Label te = new Label("Telefono:");
		tte = new TextField();
		Label et = new Label("Età:");
		tet = new TextField();
		salva = new Button("Salva");
		annulla = new Button("Annulla");
		
		if(c!=null)
		{
			tno.setText(c.getNome());
			tco.setText(c.getCognome());
			tin.setText(c.getIndirizzo());
			tte.setText(c.getTelefono());
			tet.setText(String.valueOf(c.getEta()));
		}
		
		
		
		salva.setMinSize(80, 20);
		annulla.setMinSize(80, 20);
		
		tit.setPadding(new Insets(0,0,50,0));
		
		tno.setAlignment(Pos.CENTER);
		tco.setAlignment(Pos.CENTER);
		tin.setAlignment(Pos.CENTER);
		tte.setAlignment(Pos.CENTER);
		tet.setAlignment(Pos.CENTER);
		
		
		HBox hb = new HBox();
		hb.setAlignment(Pos.BOTTOM_CENTER);
		hb.setSpacing(440);
		
		VBox vb = new VBox();
		vb.setAlignment(Pos.CENTER);
		vb.setSpacing(5);
		
		vb.getChildren().add(tit);
		vb.getChildren().add(no);
		vb.getChildren().add(tno);
		vb.getChildren().add(co);
		vb.getChildren().add(tco);
		vb.getChildren().add(in);
		vb.getChildren().add(tin);
		vb.getChildren().add(te);
		vb.getChildren().add(tte);
		vb.getChildren().add(et);
		vb.getChildren().add(tet);
		hb.getChildren().add(salva);
		hb.getChildren().add(annulla);
		
		hb.setPadding(new Insets(50,0,0,0));
		
		secondaryLayout = new StackPane();
		secondaryLayout.setAlignment(Pos.CENTER);
		secondaryLayout.getChildren().add(vb);
		secondaryLayout.getChildren().add(hb);
		
		secondScene = new Scene(secondaryLayout, 600, 400);
		
		     // New window (Stage)
		newWindow = new Stage();
		newWindow.setTitle("Editor-Contatto");
		newWindow.getIcons().add(new Image(this.getClass().getResource("/imm/rubrica.jpg").toString()));
		newWindow.setScene(secondScene);
		
		// Specifies the modality for new window.
		newWindow.initModality(Modality.WINDOW_MODAL);
		
		// Specifies the owner Window (parent) for new window
		newWindow.initOwner(((Node)event.getTarget()).getScene().getWindow());
		
		// Set position of second window, related to primary window.
		newWindow.setX(((Node)event.getTarget()).getScene().getWindow().getX() + 200);
		newWindow.setY(((Node)event.getTarget()).getScene().getWindow().getY() + 100);
		
		newWindow.show();
	}	
}
